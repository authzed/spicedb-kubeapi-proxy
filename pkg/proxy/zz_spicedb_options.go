// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package proxy

import (
	server "github.com/authzed/spicedb/pkg/cmd/server"
	defaults "github.com/creasty/defaults"
	helpers "github.com/ecordell/optgen/helpers"
)

type SpiceDBOptionsOption func(s *SpiceDBOptions)

// NewSpiceDBOptionsWithOptions creates a new SpiceDBOptions with the passed in options set
func NewSpiceDBOptionsWithOptions(opts ...SpiceDBOptionsOption) *SpiceDBOptions {
	s := &SpiceDBOptions{}
	for _, o := range opts {
		o(s)
	}
	return s
}

// NewSpiceDBOptionsWithOptionsAndDefaults creates a new SpiceDBOptions with the passed in options set starting from the defaults
func NewSpiceDBOptionsWithOptionsAndDefaults(opts ...SpiceDBOptionsOption) *SpiceDBOptions {
	s := &SpiceDBOptions{}
	defaults.MustSet(s)
	for _, o := range opts {
		o(s)
	}
	return s
}

// ToOption returns a new SpiceDBOptionsOption that sets the values from the passed in SpiceDBOptions
func (s *SpiceDBOptions) ToOption() SpiceDBOptionsOption {
	return func(to *SpiceDBOptions) {
		to.SpiceDBEndpoint = s.SpiceDBEndpoint
		to.EmbeddedSpiceDB = s.EmbeddedSpiceDB
		to.Insecure = s.Insecure
		to.SkipVerifyCA = s.SkipVerifyCA
		to.SecureSpiceDBTokensBySpace = s.SecureSpiceDBTokensBySpace
		to.SpicedbCAPath = s.SpicedbCAPath
	}
}

// DebugMap returns a map form of SpiceDBOptions for debugging
func (s SpiceDBOptions) DebugMap() map[string]any {
	debugMap := map[string]any{}
	debugMap["SpiceDBEndpoint"] = helpers.DebugValue(s.SpiceDBEndpoint, false)
	debugMap["Insecure"] = helpers.SensitiveDebugValue(s.Insecure)
	debugMap["SkipVerifyCA"] = helpers.DebugValue(s.SkipVerifyCA, false)
	debugMap["SecureSpiceDBTokensBySpace"] = helpers.SensitiveDebugValue(s.SecureSpiceDBTokensBySpace)
	debugMap["SpicedbCAPath"] = helpers.DebugValue(s.SpicedbCAPath, false)
	return debugMap
}

// SpiceDBOptionsWithOptions configures an existing SpiceDBOptions with the passed in options set
func SpiceDBOptionsWithOptions(s *SpiceDBOptions, opts ...SpiceDBOptionsOption) *SpiceDBOptions {
	for _, o := range opts {
		o(s)
	}
	return s
}

// WithOptions configures the receiver SpiceDBOptions with the passed in options set
func (s *SpiceDBOptions) WithOptions(opts ...SpiceDBOptionsOption) *SpiceDBOptions {
	for _, o := range opts {
		o(s)
	}
	return s
}

// WithSpiceDBEndpoint returns an option that can set SpiceDBEndpoint on a SpiceDBOptions
func WithSpiceDBEndpoint(spiceDBEndpoint string) SpiceDBOptionsOption {
	return func(s *SpiceDBOptions) {
		s.SpiceDBEndpoint = spiceDBEndpoint
	}
}

// WithEmbeddedSpiceDB returns an option that can set EmbeddedSpiceDB on a SpiceDBOptions
func WithEmbeddedSpiceDB(embeddedSpiceDB server.RunnableServer) SpiceDBOptionsOption {
	return func(s *SpiceDBOptions) {
		s.EmbeddedSpiceDB = embeddedSpiceDB
	}
}

// WithInsecure returns an option that can set Insecure on a SpiceDBOptions
func WithInsecure(insecure bool) SpiceDBOptionsOption {
	return func(s *SpiceDBOptions) {
		s.Insecure = insecure
	}
}

// WithSkipVerifyCA returns an option that can set SkipVerifyCA on a SpiceDBOptions
func WithSkipVerifyCA(skipVerifyCA bool) SpiceDBOptionsOption {
	return func(s *SpiceDBOptions) {
		s.SkipVerifyCA = skipVerifyCA
	}
}

// WithSecureSpiceDBTokensBySpace returns an option that can set SecureSpiceDBTokensBySpace on a SpiceDBOptions
func WithSecureSpiceDBTokensBySpace(secureSpiceDBTokensBySpace string) SpiceDBOptionsOption {
	return func(s *SpiceDBOptions) {
		s.SecureSpiceDBTokensBySpace = secureSpiceDBTokensBySpace
	}
}

// WithSpicedbCAPath returns an option that can set SpicedbCAPath on a SpiceDBOptions
func WithSpicedbCAPath(spicedbCAPath string) SpiceDBOptionsOption {
	return func(s *SpiceDBOptions) {
		s.SpicedbCAPath = spicedbCAPath
	}
}
